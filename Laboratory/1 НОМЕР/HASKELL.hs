import Data.List (find) -- Импорт функции find из модуля Data.List, которая используется для поиска элемента в списке, удовлетворяющего определенному предикату.

-- Функция isPrime проверяет, является ли число простым.
isPrime :: Int -> Bool
isPrime n
  | n < 2     = False -- Числа меньше 2 не являются простыми.
  | n == 2    = True  -- Число 2 является простым.
  | even n    = False -- Четные числа кроме 2 не являются простыми.
  | otherwise = all ((/=0) . mod n) $ takeWhile (\x -> x*x <= n) [3,5..]
  -- Для нечетных чисел больше 2, проверяем делители от 3 до корня из числа n.
  -- Если число n делится без остатка на любое из них, то оно не является простым.

-- Функция findPrime ищет ближайшее простое число, начиная с заданного числа n и шагом step.
findPrime :: Int -> Int -> Int
findPrime n step = case find isPrime [n, n+step..] of
                     Just prime -> prime -- Если простое число найдено, возвращаем его.
                     Nothing -> error "Prime number not found" -- Если простое число не найдено, вызываем ошибку.

-- Главная функция программы.
main :: IO ()
main = do
  n <- readLn :: IO Int -- Чтение целого числа из стандартного ввода.
  let right = findPrime n 1 -- Поиск ближайшего правого простого числа.
  if right == n then do
    putStrLn "0" -- Если введенное число n является простым, выводим "0".
  else do
    let left = findPrime n (-1) -- Иначе, ищем ближайшее левое простое число.
    print $ min (abs (n - left)) (abs (n - right)) -- Выводим минимальную разницу по модулю между n и найденными простыми числами.